#!/usr/bin/env python3
"""
LensCRL v3.0 - CLI avec API Backend
==================================

Interface en ligne de commande utilisant l'API Backend Phase 3.
D√©couplage complet entre interface et logique m√©tier.
"""

import argparse
import sys
import json
import logging
from pathlib import Path
from typing import Optional

# Imports API
sys.path.insert(0, str(Path(__file__).parent / "src"))
from src.api.lenscrl_api import LensCRLAPI
from src.callbacks.progress_callbacks import ConsoleCallback, LoggingCallback, CompositeCallback
from src.models.api_models import OperationMode


def setup_logging(verbose: bool = False) -> logging.Logger:
    """Configure le logging"""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)


def cmd_analyze(args) -> int:
    """Commande d'analyse de document"""
    logger = setup_logging(args.verbose)
    
    # Callbacks
    callbacks = [ConsoleCallback(verbose=args.verbose)]
    if args.log_file:
        log_callback = LoggingCallback(logger)
        callbacks.append(log_callback)
    
    callback = CompositeCallback(callbacks)
    api = LensCRLAPI(callback=callback)
    
    # Analyse
    result = api.analyze_document(args.pdf, options=vars(args))
    
    # Affichage r√©sultats
    if result.success:
        print(f"\nüìä ANALYSE COMPL√àTE")
        print(f"üìÑ Document: {result.document_info.file_path}")
        print(f"üìã Pages: {result.document_info.page_count}")
        print(f"üìç Sections: {len(result.sections_detected)}")
        print(f"üñºÔ∏è Images: {len(result.images_detected)}")
        print(f"‚è±Ô∏è Temps: {result.processing_time:.2f}s")
        
        # Sauvegarde JSON si demand√©e
        if args.output_json:
            json_path = Path(args.output_json)
            json_path.write_text(result.to_json(), encoding='utf-8')
            print(f"üíæ Analyse sauv√©e: {json_path}")
        
        return 0
    else:
        print(f"‚ùå √âchec de l'analyse: {', '.join(result.errors)}")
        return 1


def cmd_preview(args) -> int:
    """Commande de preview d'extraction"""
    logger = setup_logging(args.verbose)
    
    callback = ConsoleCallback(verbose=args.verbose)
    api = LensCRLAPI(callback=callback)
    
    # Preview
    result = api.preview_extraction(
        args.pdf, 
        args.output,
        manual_name=args.manual,
        options=vars(args)
    )
    
    # Affichage r√©sultats
    if result.analysis.success:
        print(f"\nüîç PREVIEW D'EXTRACTION")
        print(f"üìñ Manuel: {result.extraction_plan['manual_name']}")
        print(f"üñºÔ∏è Images √† extraire: {len(result.preview_images)}")
        print(f"‚ùå Images rejet√©es: {len(result.rejected_images)}")
        print(f"üìÇ Taille estim√©e: {result.estimated_output_size / 1024:.1f} KB")
        print(f"‚è±Ô∏è Dur√©e estim√©e: {result.estimated_duration:.1f}s")
        
        # D√©tails par section
        plan = result.extraction_plan
        if plan['sections_with_images'] > 0:
            print(f"\nüìã R√âPARTITION PAR SECTION:")
            for section, count in plan['images_by_section'].items():
                print(f"  Section {section}: {count} image(s)")
        
        # Sauvegarde JSON si demand√©e
        if args.output_json:
            json_path = Path(args.output_json)
            json_path.write_text(result.to_json(), encoding='utf-8')
            print(f"üíæ Preview sauv√©: {json_path}")
        
        return 0
    else:
        print(f"‚ùå √âchec du preview: {', '.join(result.analysis.errors)}")
        return 1


def cmd_extract(args) -> int:
    """Commande d'extraction compl√®te"""
    logger = setup_logging(args.verbose)
    
    callback = ConsoleCallback(verbose=args.verbose)
    api = LensCRLAPI(callback=callback)
    
    # Extraction
    result = api.extract_images(
        args.pdf,
        args.output,
        manual_name=args.manual,
        options=vars(args)
    )
    
    # Affichage r√©sultats
    if result.success:
        print(f"\nüéâ EXTRACTION TERMIN√âE")
        print(f"üìÅ R√©pertoire: {result.output_directory}")
        print(f"üñºÔ∏è Images extraites: {len(result.extracted_files)}")
        print(f"üìä Sections avec images: {result.statistics['sections_with_images']}")
        print(f"üíΩ Taille totale: {result.statistics['output_size_bytes'] / 1024:.1f} KB")
        print(f"‚è±Ô∏è Temps total: {result.processing_time:.2f}s")
        
        # Liste des fichiers cr√©√©s
        if args.verbose:
            print(f"\nüìÑ FICHIERS CR√â√âS:")
            for file_info in result.extracted_files[:10]:  # Limiter √† 10
                print(f"  ‚Ä¢ {file_info['filename']} (page {file_info['page']})")
            
            if len(result.extracted_files) > 10:
                print(f"  ... et {len(result.extracted_files) - 10} autres")
        
        # Sauvegarde JSON si demand√©e
        if args.output_json:
            json_path = Path(args.output_json)
            json_path.write_text(result.to_json(), encoding='utf-8')
            print(f"üíæ R√©sultats sauv√©s: {json_path}")
        
        return 0
    else:
        print(f"‚ùå √âchec de l'extraction: {', '.join(result.errors)}")
        return 1


def cmd_validate_config(args) -> int:
    """Commande de validation de configuration"""
    api = LensCRLAPI()
    
    # Charger la configuration
    try:
        if args.config.endswith('.json'):
            import json
            with open(args.config, 'r') as f:
                config = json.load(f)
        elif args.config.endswith('.yaml') or args.config.endswith('.yml'):
            import yaml
            with open(args.config, 'r') as f:
                config = yaml.safe_load(f)
        else:
            print(f"‚ùå Format de fichier non support√©: {args.config}")
            return 1
    except Exception as e:
        print(f"‚ùå Erreur lecture configuration: {e}")
        return 1
    
    # Validation
    result = api.validate_configuration(config)
    
    print(f"üîß VALIDATION CONFIGURATION")
    print(f"‚úÖ Valide: {result.is_valid}")
    
    if result.errors:
        print(f"\n‚ùå ERREURS ({len(result.errors)}):")
        for error in result.errors:
            print(f"  ‚Ä¢ {error}")
    
    if result.warnings:
        print(f"\n‚ö†Ô∏è AVERTISSEMENTS ({len(result.warnings)}):")
        for warning in result.warnings:
            print(f"  ‚Ä¢ {warning}")
    
    if result.suggestions:
        print(f"\nüí° SUGGESTIONS ({len(result.suggestions)}):")
        for suggestion in result.suggestions:
            print(f"  ‚Ä¢ {suggestion}")
    
    return 0 if result.is_valid else 1


def main():
    """Fonction principale CLI"""
    parser = argparse.ArgumentParser(
        description="LensCRL v3.0 - Extracteur d'images PDF avec API Backend",
        epilog="Utilise l'API Backend Phase 3 pour un d√©couplage complet."
    )
    
    parser.add_argument('--version', action='version', version='LensCRL 3.0 (Phase 3)')
    parser.add_argument('--verbose', '-v', action='store_true', help="Mode verbeux")
    parser.add_argument('--log-file', help="Fichier de log")
    parser.add_argument('--output-json', help="Sauvegarder r√©sultats en JSON")
    
    subparsers = parser.add_subparsers(dest='command', help='Commandes disponibles')
    
    # Commande analyze
    analyze_parser = subparsers.add_parser('analyze', help='Analyser un PDF sans extraction')
    analyze_parser.add_argument('pdf', help='Fichier PDF √† analyser')
    analyze_parser.set_defaults(func=cmd_analyze)
    
    # Commande preview
    preview_parser = subparsers.add_parser('preview', help='Preview d\'extraction')
    preview_parser.add_argument('pdf', help='Fichier PDF')
    preview_parser.add_argument('output', help='R√©pertoire de sortie pr√©vu')
    preview_parser.add_argument('--manual', '-m', help='Nom du manuel')
    preview_parser.set_defaults(func=cmd_preview)
    
    # Commande extract
    extract_parser = subparsers.add_parser('extract', help='Extraire les images')
    extract_parser.add_argument('pdf', help='Fichier PDF')
    extract_parser.add_argument('output', help='R√©pertoire de sortie')
    extract_parser.add_argument('--manual', '-m', help='Nom du manuel')
    extract_parser.set_defaults(func=cmd_extract)
    
    # Commande validate-config
    config_parser = subparsers.add_parser('validate-config', help='Valider une configuration')
    config_parser.add_argument('config', help='Fichier de configuration (.json ou .yaml)')
    config_parser.set_defaults(func=cmd_validate_config)
    
    # Parse et ex√©cution
    args = parser.parse_args()
    
    if not hasattr(args, 'func'):
        parser.print_help()
        return 1
    
    try:
        return args.func(args)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Op√©ration annul√©e par l'utilisateur")
        return 130
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main()) 